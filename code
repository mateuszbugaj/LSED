diff --git a/.gitignore b/.gitignore
index 5671c6c..183b601 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,5 @@
 .idea
 *.log
-target/
\ No newline at end of file
+target/
+chatLog/**
+userDatabase.json
\ No newline at end of file
diff --git a/LSEDConfig.yaml b/LSEDConfig.yaml
index d78bd9f..62a6d45 100644
--- a/LSEDConfig.yaml
+++ b/LSEDConfig.yaml
@@ -1,11 +1,11 @@
 userDatabaseDir: "src/main/resources/userDatabase.json" # Default path
-chatLogDir: "src/main/resources/chatLog/"
+chatLogDir: "chatLog/"
 
 adminUsers:
   - "anotherAdmin"
 
 deviceConfigDir:
-  - "../config/devices/manipulator.yaml"
+  - "deviceConfigFiles/exampleDevice.yaml"
 
 streamConfigDir:
   -
diff --git a/pom.xml b/pom.xml
index 0cc611c..0f04ec1 100644
--- a/pom.xml
+++ b/pom.xml
@@ -60,6 +60,11 @@
             <artifactId>snakeyaml</artifactId>
             <version>1.30</version>
         </dependency>
+        <dependency>
+            <groupId>com.fasterxml.jackson.core</groupId>
+            <artifactId>jackson-databind</artifactId>
+            <version>2.14.2</version>
+        </dependency>
 
         <!-- https://mvnrepository.com/artifact/com.fazecast/jSerialComm -->
         <dependency>
diff --git a/src/main/java/Devices/DeviceCommand.java b/src/main/java/Devices/DeviceCommand.java
index a5f979d..d5793ad 100644
--- a/src/main/java/Devices/DeviceCommand.java
+++ b/src/main/java/Devices/DeviceCommand.java
@@ -87,7 +87,7 @@ public class DeviceCommand{
                 "\n - " + i.getName() + " (" + i.getType() + ')' +
                         (i.getPossibleValues().isEmpty()?"":"\n   " + i.getPossibleValues().toString()) +
                         (!i.getOptional()?"":"\n   " + "Optional") +
-                        (!i.getPredefined().isEmpty()?"":"\n   " + i.getPredefined())).collect(Collectors.joining());
+                        ((i.getPredefined()==null||!i.getPredefined().isEmpty())?"":"\n   " + i.getPredefined())).collect(Collectors.joining());
 
         return "$ " + name + '\n' +
                 description +
diff --git a/src/main/java/Devices/DeviceManager.java b/src/main/java/Devices/DeviceManager.java
index cec3515..2a00368 100644
--- a/src/main/java/Devices/DeviceManager.java
+++ b/src/main/java/Devices/DeviceManager.java
@@ -183,7 +183,8 @@ public class DeviceManager implements Device, MessageSubscriber {
     @Override
     public void handleMessage(Message message) throws ReturnMessageException {
         logger.debug("Received device user message: " + message);
-        if(!message.getUser().hasAdminPrivileges() && userManager.getActiveUser().get() != null && !message.getUser().getName().equals(userManager.getActiveUser().get().getName())){
+
+        if(!message.getUser().isAdmin() && (userManager.getActiveUser().get() == null || !message.getUser().getName().equals(userManager.getActiveUser().get().getName()))){
             return;
         }
 
diff --git a/src/main/java/Devices/ExternalDevice.java b/src/main/java/Devices/ExternalDevice.java
index 731d705..08fe4b2 100644
--- a/src/main/java/Devices/ExternalDevice.java
+++ b/src/main/java/Devices/ExternalDevice.java
@@ -1,19 +1,15 @@
 package Devices;
 
-import Interpreter.Interpreter;
-import Utils.Subscriber;
+import StreamingService.Message;
+import StreamingService.User;
+import Utils.LSEDConfig;
 import View.Camera;
-import Utils.Publisher;
-import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.yaml.snakeyaml.Yaml;
 
-import java.io.FileReader;
 import java.io.IOException;
 import java.util.*;
 import java.util.function.Supplier;
-import java.util.stream.Collectors;
 
 public class ExternalDevice implements Device, ReceivedMessagesPublisher, CurrentStatePublisher {
     private static final Logger logger = LoggerFactory.getLogger(ExternalDevice.class);
@@ -60,8 +56,10 @@ public class ExternalDevice implements Device, ReceivedMessagesPublisher, Curren
                             if(!waitingForConformation){
                                 try {
                                     sendMessage(deviceCommand.getDeviceInstructions().pop());
-                                    waitingForConformation = true;
-                                    logger.debug("Device is waiting for instruction confirmation");
+                                    if(serialCom != null && serialCom.getPortName() !=null ){
+                                        waitingForConformation = true;
+                                        logger.debug("Device is waiting for instruction confirmation");
+                                    }
                                 } catch (IOException e) {
                                     throw new RuntimeException(e);
                                 }
@@ -89,13 +87,14 @@ public class ExternalDevice implements Device, ReceivedMessagesPublisher, Curren
 
     // todo: temp, should not be public and only available by the serial port
     public void receiveMessage(ReceivedMessage receivedMessage){
-        logger.debug("Received message: " + receivedMessage.getMessage());
+        logger.debug("Received message: " + receivedMessage.getContent());
         receivedMessages.add(receivedMessage); // todo: is this list even used?
-        if(waitingForConformation && receivedMessage.getMessage().compareTo("done") == 0){
+        if(waitingForConformation && receivedMessage.getContent().compareTo("done") == 0){
             logger.debug("Device is no longer waiting");
             waitingForConformation = false;
         }
 
+        LSEDConfig.get().getLogRegister().log(receivedMessage);
         receivedMessageSubscriber.forEach(s -> s.addReceivedMessage(receivedMessage));
     }
 
@@ -111,6 +110,11 @@ public class ExternalDevice implements Device, ReceivedMessagesPublisher, Curren
     public void sendMessage(String message) throws IOException {
         logger.debug("Sending message: " + message);
         serialCom.sendMessage(message + '\n' + '\r');
+        LSEDConfig.get().getLogRegister().log(new Message(new User("DeviceManager -> " + deviceName), message, new Date()));
+
+        if(serialCom != null || serialCom.getPortName() != null){
+            receivedMessageSubscriber.forEach(s -> s.addReceivedMessage(new ReceivedMessage(deviceName ,message, new Date())));
+        }
     }
 
     public ArrayList<ReceivedMessage> getReceivedMessagesList(){
diff --git a/src/main/java/Devices/ReceivedMessage.java b/src/main/java/Devices/ReceivedMessage.java
index fcbd24b..4cd7336 100644
--- a/src/main/java/Devices/ReceivedMessage.java
+++ b/src/main/java/Devices/ReceivedMessage.java
@@ -3,19 +3,25 @@ package Devices;
 import java.util.Date;
 
 public class ReceivedMessage {
-    private final String message;
+    private final String deviceName;
+    private final String content;
     private final Date timestamp;
 
-    public ReceivedMessage(String message, Date timestamp) {
-        this.message = message;
+    public ReceivedMessage(String deviceName, String message, Date timestamp) {
+        this.deviceName = deviceName;
+        this.content = message;
         this.timestamp = timestamp;
     }
 
-    public String getMessage() {
-        return message;
+    public String getContent() {
+        return content;
     }
 
     public Date getTimestamp() {
         return timestamp;
     }
+
+    public String getDeviceName() {
+        return deviceName;
+    }
 }
diff --git a/src/main/java/Devices/SerialCom.java b/src/main/java/Devices/SerialCom.java
index 5f3e420..e1e389c 100644
--- a/src/main/java/Devices/SerialCom.java
+++ b/src/main/java/Devices/SerialCom.java
@@ -45,7 +45,7 @@ public class SerialCom {
         } catch (IOException e) {
             e.printStackTrace();
         } catch (NullPointerException e){
-            System.out.println("Serial not selected");
+            logger.debug("Serial not selected");
         }
     }
 
@@ -61,7 +61,7 @@ public class SerialCom {
 
     public void sendMessage(String message) throws IOException {
         if(message == null || message.isEmpty()){
-            System.out.println("Cannot send empty message to the robot!");
+            logger.debug("Cannot send empty message to the robot!");
         }
 
         if(serialPort != null){
diff --git a/src/main/java/Devices/SerialPortDataListenerImpl.java b/src/main/java/Devices/SerialPortDataListenerImpl.java
index c9ab3f0..293e104 100644
--- a/src/main/java/Devices/SerialPortDataListenerImpl.java
+++ b/src/main/java/Devices/SerialPortDataListenerImpl.java
@@ -46,7 +46,7 @@ public class SerialPortDataListenerImpl implements SerialPortDataListener {
             String[] messageSplit = receivedMessage.split("\r");
             for(int i = 0; i < messageSplit.length; i++){
                 if(i < fullMessageCount){
-                    device.receiveMessage(new ReceivedMessage(messageSplit[i].trim(), new Date()));
+                    device.receiveMessage(new ReceivedMessage(device.getName(), messageSplit[i].trim(), new Date()));
                 } else {
                     buffer = buffer.concat(messageSplit[i]);
                 }
diff --git a/src/main/java/Interpreter/Interpreter.java b/src/main/java/Interpreter/Interpreter.java
index da17799..5229ecf 100755
--- a/src/main/java/Interpreter/Interpreter.java
+++ b/src/main/java/Interpreter/Interpreter.java
@@ -44,6 +44,7 @@ public class Interpreter {
         return new DeviceCommand(commandDTO.getName(), commandDTO.getDescription(), commandDTO.getPrefix(), commandDTO.getDevicePrefix(), params, commandDTO.getEvents(), commandDTO.getRequiredStates(), commandDTO.getResultingState());
     }
 
+    // todo: bug: when there is command with parameter in type of String and Integer, the range for Integer is not recognized and parameter is treated as string
     public static List<DeviceCommand> interpret(Message message) throws ReturnMessageException {
         List<DeviceCommand> commandsToExecute = new ArrayList<>();
         if(!isCommand(message)){
@@ -67,7 +68,7 @@ public class Interpreter {
             }
 
             if(commandComponents.length >= 2 && commandComponents[1].equals("help")){
-                String commandsHelp = targetDevice.getCommands().stream().filter(i -> i.getPrefix().equals(commandComponents[0])).map(DeviceCommand::getHelpMessage).collect(Collectors.joining());
+                String commandsHelp = targetDevice.getCommands().stream().filter(i -> i.getPrefix().equals(commandComponents[0])).map(i -> i.getHelpMessage() + '\n').collect(Collectors.joining());
                 throw new ReturnMessageException(commandsHelp, MessageType.INFO);
             }
 
@@ -187,7 +188,7 @@ public class Interpreter {
         return true;
     }
 
-    private static List<String> getInstructions(String[] commandComponents, DeviceCommand deviceCommand){
+    private static List<String> getInstructions(String[] commandComponents, DeviceCommand deviceCommand) throws ReturnMessageException {
         if(deviceCommand.getEvents() == null || deviceCommand.getEvents().isEmpty()){
             String instruction = deviceCommand.getDevicePrefix();
             for(int paramId = 0; paramId < deviceCommand.getParams().size(); paramId++){
@@ -199,14 +200,14 @@ public class Interpreter {
                     if(deviceCommandParam.getPossibleValues().isEmpty() || deviceCommandParam.getPossibleValues().stream().anyMatch(j -> j.equals(commandComponent))){
                         instruction = instruction.concat(" ").concat(commandComponent);
                     } else {
-                        throw new RuntimeException("Parameter " + (paramId+1) + " needs to be from list: " + deviceCommandParam.getPossibleValues());
+                        throw new ReturnMessageException("Parameter " + (paramId+1) + " needs to be from list: " + deviceCommandParam.getPossibleValues());
                     }
                 }
             }
             return List.of(instruction);
         } else {
             List<String> events = deviceCommand.getEvents();
-            // Collections.reverse(events); // todo: Why reverse?
+             Collections.reverse(events); // todo: Why reverse?
 
             return events;
         }
diff --git a/src/main/java/LSEDApplication.java b/src/main/java/LSEDApplication.java
index 8dc8c84..29c95b1 100644
--- a/src/main/java/LSEDApplication.java
+++ b/src/main/java/LSEDApplication.java
@@ -1,6 +1,7 @@
 import Devices.*;
 import StreamingService.*;
 import Utils.LSEDConfig;
+import Utils.LSEDConfigDto;
 import View.AuxiliaryWindow;
 import View.MainWindow;
 import com.fazecast.jSerialComm.SerialPort;
@@ -17,7 +18,6 @@ import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Arrays;
-import java.util.List;
 
 public class LSEDApplication extends Application {
     public static Logger logger = LoggerFactory.getLogger(LSEDApplication.class);
@@ -28,8 +28,13 @@ public class LSEDApplication extends Application {
 
     @Override
     public void start(Stage stage) throws IOException {
-        logger.info("LSED Start");
         Parameters parameters = getParameters();
+        String lsedConfigFilePath = parameters.getRaw().get(0);
+
+        Yaml yaml = new Yaml(new Constructor(LSEDConfigDto.class));
+        InputStream inputStream = new FileInputStream(lsedConfigFilePath);
+        LSEDConfig.load(yaml.load(inputStream));
+
         stage.setTitle("LSED");
 
         logger.info("Available device ports: " + Arrays.toString(SerialPort.getCommPorts()));
@@ -39,7 +44,7 @@ public class LSEDApplication extends Application {
         discoveryService.stop();
         discoveryService.setEnabled(false);
 
-        UserManager userManager = new UserManager(List.of(), List.of("Admin")); // todo: These lists should be read from the LSED config file
+        UserManager userManager = new UserManager(LSEDConfig.get().getAdminUsers());
         ChatManager chatManager = new ChatManager(userManager);
         ChatBuilder chatBuilder = new ChatBuilder(chatManager);
         DeviceManager deviceManager = new DeviceManager(chatManager, userManager);
@@ -47,25 +52,31 @@ public class LSEDApplication extends Application {
         chatManager.addMessageSubscriber(deviceManager);
         chatManager.addMessageSubscriber(userManager);
 
-        Yaml yaml = new Yaml(new Constructor(LSEDConfig.class));
-        InputStream inputStream = new FileInputStream(parameters.getRaw().get(0));
-        LSEDConfig lsedConfig = yaml.load(inputStream);
-
         ExternalDeviceBuilder externalDeviceBuilder = new ExternalDeviceBuilder();
         ExternalDeviceBuilderDirector builderDirector = new ExternalDeviceBuilderDirector(externalDeviceBuilder);
 
-        for(String deviceConfig:lsedConfig.getDeviceConfigDir()){
-            try {
-                ExternalDevice device = builderDirector.build(deviceConfig);
-                deviceManager.addDevice(device);
-            } catch (SerialPortNotFoundException e) {
-                logger.error(e.toString());
+        if(LSEDConfig.get().getDeviceConfigDir() != null && !LSEDConfig.get().getDeviceConfigDir().isEmpty()){
+            for(String deviceConfig:LSEDConfig.get().getDeviceConfigDir()){
+                try {
+                    if(deviceConfig == null || deviceConfig.isEmpty()) continue;
+                    ExternalDevice device = builderDirector.build(deviceConfig);
+                    deviceManager.addDevice(device);
+                } catch (SerialPortNotFoundException e) {
+                    logger.error(e.toString());
+                }
             }
+        } else {
+            logger.error("Device list 'deviceConfigDir' is not present in LSEDConfig file");
         }
 
-        for(String streamConfig:lsedConfig.getStreamConfigDir()){
-            ChatService chatService = chatBuilder.build(streamConfig);
-            chatManager.addChat(chatService);
+        if(LSEDConfig.get().getStreamConfigDir() != null && !LSEDConfig.get().getStreamConfigDir().isEmpty()){
+            for(String streamConfig:LSEDConfig.get().getStreamConfigDir()){
+                if(streamConfig == null || streamConfig.isEmpty()) continue;
+                ChatService chatService = chatBuilder.build(streamConfig);
+                chatManager.addChat(chatService);
+            }
+        } else {
+            logger.error("Device list 'streamConfigDir' is not present in LSEDConfig file");
         }
 
         MainWindow mainWindow = new MainWindow(stage, deviceManager, chatManager, userManager);
@@ -81,4 +92,4 @@ public class LSEDApplication extends Application {
         auxiliaryWindow.show();
         chatManager.handleNewMessage(new Message(userManager.getUser("Admin"), "Application start").setType(MessageType.INFO));
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/StreamingService/ChatManager.java b/src/main/java/StreamingService/ChatManager.java
index 49bf9cf..34ccd29 100644
--- a/src/main/java/StreamingService/ChatManager.java
+++ b/src/main/java/StreamingService/ChatManager.java
@@ -1,6 +1,8 @@
 package StreamingService;
 
 import Interpreter.Interpreter;
+import Utils.LSEDConfig;
+import Utils.LogRegister;
 import Utils.ReturnMessageException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -45,7 +47,7 @@ public class ChatManager implements ChatManagerMediator{
     public void handleNewMessage(Message newMessage) {
         MessageOwnership messageOwnership;
         String messageOwner = newMessage.getUser().getName();
-        if(userManager.getUser(messageOwner).hasAdminPrivileges()) {
+        if(userManager.getUser(messageOwner).isAdmin()) {
             messageOwnership = MessageOwnership.ADMIN;
         } else if(messageOwner.equals("Interpreter")){
             messageOwnership = MessageOwnership.INTERPRETER;
@@ -64,6 +66,7 @@ public class ChatManager implements ChatManagerMediator{
         chatMessages.add(newMessage);
         messageSubscribers.forEach(sub -> sub.annotateMessage(newMessage));
 
+        LSEDConfig.get().getLogRegister().log(newMessage);
         messageSubscribers.forEach(sub -> {
             try {
                 sub.handleMessage(newMessage);
@@ -75,7 +78,7 @@ public class ChatManager implements ChatManagerMediator{
         });
 
         if(newMessage.getMessageType() == MessageType.COMMAND){
-            // If command message is not DEVICE_COMMAND, SYSTEM_COMMAND nor CONTROL_COMMAND then it is invalid
+            /* If command message is not DEVICE_COMMAND, SYSTEM_COMMAND nor CONTROL_COMMAND then it is invalid */
             Message infoMessage = new Message(userManager.getUser("Interpreter"), "Device not found").setType(MessageType.ERROR);
             handleNewMessage(infoMessage);
         }
diff --git a/src/main/java/StreamingService/User.java b/src/main/java/StreamingService/User.java
index 8d82422..34d9990 100644
--- a/src/main/java/StreamingService/User.java
+++ b/src/main/java/StreamingService/User.java
@@ -2,23 +2,30 @@ package StreamingService;
 
 public class User {
     private String name;
-    private boolean adminPrivileges = false;
+    private boolean admin = false;
     private boolean banned = false;
 
+    public User() {
+    }
+
     public User(String name) {
         this.name = name;
     }
 
+    public void setName(String name) {
+        this.name = name;
+    }
+
     public String getName() {
         return name;
     }
 
-    public void giveAdminPrivileges() {
-        adminPrivileges = true;
+    public void setAdmin(boolean admin) {
+        this.admin = admin;
     }
 
-    public boolean hasAdminPrivileges() {
-        return adminPrivileges;
+    public boolean isAdmin() {
+        return admin;
     }
 
     public boolean isBanned() {
@@ -28,4 +35,13 @@ public class User {
     public void setBanned(boolean banned) {
         this.banned = banned;
     }
+
+    @Override
+    public String toString() {
+        return "User{" +
+                "name='" + name + '\'' +
+                ", adminPrivileges=" + admin +
+                ", banned=" + banned +
+                '}';
+    }
 }
diff --git a/src/main/java/StreamingService/UserManager.java b/src/main/java/StreamingService/UserManager.java
index 497a9e3..66afe43 100644
--- a/src/main/java/StreamingService/UserManager.java
+++ b/src/main/java/StreamingService/UserManager.java
@@ -5,6 +5,7 @@ import Devices.DeviceCommand;
 import Devices.DeviceCommandParam;
 import Devices.DeviceCommandParamType;
 import Interpreter.Interpreter;
+import Utils.LSEDConfig;
 import Utils.ReturnMessageException;
 import javafx.beans.property.SimpleObjectProperty;
 import javafx.collections.FXCollections;
@@ -16,25 +17,25 @@ import java.util.*;
 
 public class UserManager implements MessageSubscriber, Device {
     private static final Logger logger = LoggerFactory.getLogger(UserManager.class);
-    private final List<User> users = new ArrayList<>();
     private SimpleObjectProperty<User> activeUser;
     private SimpleObjectProperty<Float> activeUserTimerSeconds;
     private ObservableList<UserRequest> userQueue = FXCollections.observableArrayList();
     private final Thread stopwatchThread;
     private final String systemName = "control";
     private final List<DeviceCommand> systemCommands = new ArrayList<>();
+    private final UserDatabase userDatabase;
 
-    public UserManager(List<String> bannedUserNames, List<String> adminUserNames){
-        for(String username:bannedUserNames){
-            User user = new User(username);
-            user.setBanned(true);
-            users.add(user);
-        }
+    public UserManager(List<String> adminUserNames){
+        userDatabase = new UserDatabase(LSEDConfig.get().getUserDatabaseDir());
+
+        /* Create the Admin user just right here */
+        giveAdminPrivileges(getUser("Admin"));
 
-        for(String username:adminUserNames){
-            User user = new User(username);
-            user.giveAdminPrivileges();
-            users.add(user);
+        if(adminUserNames != null){
+            for(String username:adminUserNames){
+                User user = getUser(username);
+                giveAdminPrivileges(user);
+            }
         }
 
         activeUser = new SimpleObjectProperty<>();
@@ -162,19 +163,19 @@ public class UserManager implements MessageSubscriber, Device {
     }
 
     public User getUser(String name){
-        Optional<User> optionalUser = users.stream().filter(user -> Objects.equals(user.getName(), name)).findAny();
+        Optional<User> optionalUser = userDatabase.get().stream().filter(user -> Objects.equals(user.getName(), name)).findAny();
         if(optionalUser.isPresent()){
             return optionalUser.get();
         }
 
         User user = new User(name);
         logger.debug("New user added: " + user.getName());
-        users.add(user);
+        userDatabase.add(user);
         return user;
     }
 
     public List<User> getUsers() {
-        return users;
+        return userDatabase.get();
     }
 
     public void addRequest(User user, float time){
@@ -187,6 +188,27 @@ public class UserManager implements MessageSubscriber, Device {
         }
     }
 
+    public void giveAdminPrivileges(User user){
+        user.setAdmin(true);
+        userDatabase.add(user);
+    }
+
+    public void banUser(User user){
+        user.setBanned(true);
+        userDatabase.add(user);
+
+        userQueue.removeIf(usr -> usr.getUser().getName().equals(user.getName()));
+        if(activeUser.get().getName().equals(user.getName())){
+            activeUser.set(null);
+            activeUserTimerSeconds.set(0f);
+        }
+    }
+
+    public void unbanUser(User user){
+        user.setBanned(false);
+        userDatabase.add(user);
+    }
+
     @Override
     public void annotateMessage(Message message) {
         if(message.getMessageType().equals(MessageType.COMMAND)){
@@ -225,7 +247,7 @@ public class UserManager implements MessageSubscriber, Device {
                 String requestOwner;
 
                 if(instruction.split(" ").length == 3){
-                    if(command.getOwner().hasAdminPrivileges()){
+                    if(command.getOwner().isAdmin()){
                         requestOwner = instruction.split(" ")[2];
                     } else {
                         throw new ReturnMessageException("Needs admin privilege");
@@ -246,16 +268,15 @@ public class UserManager implements MessageSubscriber, Device {
             case "ban" -> {
                 String userName = instruction.split(" ")[1];
                 User user = getUser(userName);
-                user.setBanned(true);
+                banUser(user);
                 throw new ReturnMessageException("User " + userName + " is now banned.", MessageType.INFO);
             }
 
             case "unban" -> {
                 String userName = instruction.split(" ")[1];
                 User user = getUser(userName);
-                user.setBanned(true);
                 if(user.isBanned()){
-                    user.setBanned(false);
+                    unbanUser(user);
                     throw new ReturnMessageException("User " + userName + " is now unbanned.", MessageType.INFO);
                 } else {
                     throw new ReturnMessageException("User " + userName + " is not on banned list.", MessageType.ERROR);
diff --git a/src/main/java/Utils/LSEDConfig.java b/src/main/java/Utils/LSEDConfig.java
index 0dac778..431118b 100644
--- a/src/main/java/Utils/LSEDConfig.java
+++ b/src/main/java/Utils/LSEDConfig.java
@@ -3,22 +3,55 @@ package Utils;
 import java.util.List;
 
 public class LSEDConfig {
-    private List<String> deviceConfigDir;
-    private List<String> streamConfigDir;
+    private static LSEDConfigDto dto;
+    private static LSEDConfig instance;
+    private LogRegister logRegister;
 
-    public List<String> getDeviceConfigDir() {
-        return deviceConfigDir;
+    private LSEDConfig(){
+    }
+
+    public static void load(LSEDConfigDto lsedConfig){
+        dto = lsedConfig;
+    }
+
+    public static LSEDConfig get(){
+        if(instance == null){
+            instance = new LSEDConfig();
+        }
+
+        return instance;
     }
 
-    public void setDeviceConfigDir(List<String> deviceConfigDir) {
-        this.deviceConfigDir = deviceConfigDir;
+    public List<String> getDeviceConfigDir() {
+        return dto.getDeviceConfigDir();
     }
 
     public List<String> getStreamConfigDir() {
-        return streamConfigDir;
+        return dto.getStreamConfigDir();
     }
 
-    public void setStreamConfigDir(List<String> streamConfigDir) {
-        this.streamConfigDir = streamConfigDir;
+    public String getUserDatabaseDir() {
+        if(dto.getUserDatabaseDir() != null){
+            return dto.getUserDatabaseDir();
+        }
+
+        /* User database json file default path */
+        return "src/main/resources/userDatabase.json";
+    }
+
+    public List<String> getAdminUsers(){
+        return dto.getAdminUsers();
+    }
+
+    public String getChatLogDir() {
+        return dto.getChatLogDir();
+    }
+
+    public LogRegister getLogRegister() {
+        if (logRegister == null) {
+            logRegister = new LogRegister(getChatLogDir());
+        }
+
+        return logRegister;
     }
 }
diff --git a/src/main/java/View/AuxiliaryWindow.java b/src/main/java/View/AuxiliaryWindow.java
index d4d3114..2396ee8 100644
--- a/src/main/java/View/AuxiliaryWindow.java
+++ b/src/main/java/View/AuxiliaryWindow.java
@@ -210,7 +210,7 @@ public class AuxiliaryWindow implements Publisher<Message> {
         String output = "";
         if(deviceMediator != null){
             for(int i = deviceMediator.receivedMessages.size() - 1; i >= 0; i--){
-                output = output.concat(deviceMediator.receivedMessages.get(i).getMessage()).concat("\n");
+                output = output.concat(deviceMediator.receivedMessages.get(i).getContent()).concat("\n");
             }
         }
 
@@ -240,10 +240,6 @@ public class AuxiliaryWindow implements Publisher<Message> {
         chatInputTextField.setOnKeyPressed(event -> {
             if(event.getCode() == KeyCode.ENTER){
                 if(!chatInputTextField.getText().isEmpty()){
-//                    chatManager.getChatMessages().add(new UserMessage("Admin", chatInputTextField.getText(), new Date()));
-//                    chatManager.sendMessage(new UserMessage("Admin", chatInputTextField.getText(), new Date()));
-//                    receivedMessageSubscriber.forEach(s -> s.update(new UserMessage("Admin", chatInputTextField.getText(), new Date())));
-//                    receivedMessageSubscriber.forEach(s -> s.update(new UserMessage(UserManager.getUser("Admin"), chatInputTextField.getText(), new Date()).setMessageType(MessageType.ADMIN_MESSAGE)));
                     chatManager.handleNewMessage(chatInputTextField.getText(), "Admin");
                     chatInputTextField.setText("");
                 }
@@ -255,9 +251,6 @@ public class AuxiliaryWindow implements Publisher<Message> {
         sendChatInputButton.setMinWidth(100);
         sendChatInputButton.setOnAction(event -> {
             if(!chatInputTextField.getText().isEmpty()){
-//                chatManager.getChatMessages().add(new UserMessage("Admin", chatInputTextField.getText(), new Date()));
-//                chatManager.sendMessage(new UserMessage("Admin", chatInputTextField.getText(), new Date()));
-//                receivedMessageSubscriber.forEach(s -> s.update(new UserMessage(UserManager.getUser("Admin"), chatInputTextField.getText(), new Date()).setMessageType(MessageType.ADMIN_MESSAGE)));
                 chatManager.handleNewMessage(chatInputTextField.getText(), "Admin");
                 chatInputTextField.setText("");
             }
diff --git a/src/main/java/View/MainWindow.java b/src/main/java/View/MainWindow.java
index 04af913..5dcace8 100644
--- a/src/main/java/View/MainWindow.java
+++ b/src/main/java/View/MainWindow.java
@@ -672,7 +672,7 @@ public class MainWindow implements MessageSubscriber {
 //            cell.setBorder(new Border(new BorderStroke(Paint.valueOf("white"), BorderStrokeStyle.SOLID, new CornerRadii(5), new BorderWidths(1))));
             cell.setBorder(new Border(new BorderStroke(Paint.valueOf("grey"), BorderStrokeStyle.SOLID, new CornerRadii(0), new BorderWidths(0, 0, 1, 0))));
 
-            Text content = new Text(receivedMessage.getMessage());
+            Text content = new Text(receivedMessage.getContent());
             content.setWrappingWidth(250);
             content.setFill(Paint.valueOf("white"));
 
@@ -777,11 +777,13 @@ public class MainWindow implements MessageSubscriber {
         messages.sort(Comparator.comparing(Message::getTimestamp));
         if(messages.size() > 100) messages.subList(messages.size() - 100, messages.size()); // cap size at 100
 
-        messageCellList.getChildren().clear();
-        for(Message msg: messages){
-            Pane cell = generateUserMessageCell(msg);
-            cell.setRotate(180);
-            messageCellList.getChildren().add(0, cell);
-        }
+        Platform.runLater(() -> {
+            messageCellList.getChildren().clear();
+            for(Message msg: messages){
+                Pane cell = generateUserMessageCell(msg);
+                cell.setRotate(180);
+                messageCellList.getChildren().add(0, cell);
+            }
+        });
     }
 }
\ No newline at end of file
diff --git a/src/test/java/Devices/DeviceManagerTest.java b/src/test/java/Devices/DeviceManagerTest.java
index aeb2071..c017b8d 100644
--- a/src/test/java/Devices/DeviceManagerTest.java
+++ b/src/test/java/Devices/DeviceManagerTest.java
@@ -24,7 +24,7 @@ class DeviceManagerTest {
             }
         };
 
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
         DeviceManager deviceManager = new DeviceManager(chatManagerMediator, userManager);
 
         DeviceCommandParam deviceCommandParam = new DeviceCommandParam("Param1", DeviceCommandParamType.Integer, List.of(), 0, 100, false, "0");
@@ -64,7 +64,7 @@ class DeviceManagerTest {
             }
         };
 
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
         DeviceManager deviceManager = new DeviceManager(chatManagerMediator, userManager);
 
         Message message = new Message(userManager.getUser("User1"), "!dev1 com1 10");
diff --git a/src/test/java/Devices/SerialPortDataListenerImplTest.java b/src/test/java/Devices/SerialPortDataListenerImplTest.java
index 7a5cad3..940b357 100644
--- a/src/test/java/Devices/SerialPortDataListenerImplTest.java
+++ b/src/test/java/Devices/SerialPortDataListenerImplTest.java
@@ -27,7 +27,7 @@ class SerialPortDataListenerImplTest {
         dataListener.receivedMessage = msgWithCaretReturn;
         dataListener.serialEvent(new SerialPortEvent(SerialPort.getCommPorts()[0], SerialPort.LISTENING_EVENT_DATA_AVAILABLE, msgWithCaretReturn.getBytes()));
 
-        assertEquals(msg.trim(), device.getReceivedMessagesList().get(0).getMessage());
+        assertEquals(msg.trim(), device.getReceivedMessagesList().get(0).getContent());
     }
 
     @Test
@@ -37,7 +37,7 @@ class SerialPortDataListenerImplTest {
         dataListener.receivedMessage = msgWithCaretReturn;
         dataListener.serialEvent(new SerialPortEvent(SerialPort.getCommPorts()[0], SerialPort.LISTENING_EVENT_DATA_AVAILABLE, msgWithCaretReturn.getBytes()));
 
-        assertEquals(msg.trim(), device.getReceivedMessagesList().get(0).getMessage());
+        assertEquals(msg.trim(), device.getReceivedMessagesList().get(0).getContent());
     }
 
     @Test
@@ -52,7 +52,7 @@ class SerialPortDataListenerImplTest {
         dataListener.receivedMessage = chunk2WithCaretReturn;
         dataListener.serialEvent(new SerialPortEvent(SerialPort.getCommPorts()[0], SerialPort.LISTENING_EVENT_DATA_AVAILABLE, chunk2WithCaretReturn.getBytes()));
 
-        assertEquals(completeMsg.trim(), device.getReceivedMessagesList().get(0).getMessage());
+        assertEquals(completeMsg.trim(), device.getReceivedMessagesList().get(0).getContent());
     }
 
     @Test
@@ -72,7 +72,7 @@ class SerialPortDataListenerImplTest {
         dataListener.receivedMessage = chunk3WithCaretReturn;
         dataListener.serialEvent(new SerialPortEvent(SerialPort.getCommPorts()[0], SerialPort.LISTENING_EVENT_DATA_AVAILABLE, chunk3WithCaretReturn.getBytes()));
 
-        assertEquals(completeMsg.trim(), device.getReceivedMessagesList().get(0).getMessage());
+        assertEquals(completeMsg.trim(), device.getReceivedMessagesList().get(0).getContent());
     }
 
     @Test
@@ -88,8 +88,8 @@ class SerialPortDataListenerImplTest {
         dataListener.receivedMessage = msgTwoWithCaretReturn;
         dataListener.serialEvent(new SerialPortEvent(SerialPort.getCommPorts()[0], SerialPort.LISTENING_EVENT_DATA_AVAILABLE, msgTwoWithCaretReturn.getBytes()));
 
-        assertEquals(msgOne.trim(), device.getReceivedMessagesList().get(0).getMessage());
-        assertEquals(msgTwo.trim(), device.getReceivedMessagesList().get(1).getMessage());
+        assertEquals(msgOne.trim(), device.getReceivedMessagesList().get(0).getContent());
+        assertEquals(msgTwo.trim(), device.getReceivedMessagesList().get(1).getContent());
     }
 
     @Test
@@ -103,8 +103,8 @@ class SerialPortDataListenerImplTest {
         dataListener.receivedMessage = chunkTwo;
         dataListener.serialEvent(new SerialPortEvent(SerialPort.getCommPorts()[0], SerialPort.LISTENING_EVENT_DATA_AVAILABLE, chunkTwo.getBytes()));
 
-        assertEquals("Message one", device.getReceivedMessagesList().get(0).getMessage());
-        assertEquals("Message two", device.getReceivedMessagesList().get(1).getMessage());
+        assertEquals("Message one", device.getReceivedMessagesList().get(0).getContent());
+        assertEquals("Message two", device.getReceivedMessagesList().get(1).getContent());
     }
 
     @Test
@@ -118,9 +118,9 @@ class SerialPortDataListenerImplTest {
         dataListener.receivedMessage = chunkTwo;
         dataListener.serialEvent(new SerialPortEvent(SerialPort.getCommPorts()[0], SerialPort.LISTENING_EVENT_DATA_AVAILABLE, chunkTwo.getBytes()));
 
-        assertEquals("Message one", device.getReceivedMessagesList().get(0).getMessage());
-        assertEquals("Message two", device.getReceivedMessagesList().get(1).getMessage());
-        assertEquals("Message three", device.getReceivedMessagesList().get(2).getMessage());
+        assertEquals("Message one", device.getReceivedMessagesList().get(0).getContent());
+        assertEquals("Message two", device.getReceivedMessagesList().get(1).getContent());
+        assertEquals("Message three", device.getReceivedMessagesList().get(2).getContent());
     }
 
     @Test
@@ -138,10 +138,10 @@ class SerialPortDataListenerImplTest {
         dataListener.receivedMessage = chunkThree;
         dataListener.serialEvent(new SerialPortEvent(SerialPort.getCommPorts()[0], SerialPort.LISTENING_EVENT_DATA_AVAILABLE, chunkThree.getBytes()));
 
-        assertEquals("Got lgt on", device.getReceivedMessagesList().get(0).getMessage());
-        assertEquals("Lights on", device.getReceivedMessagesList().get(1).getMessage());
-        assertEquals("Brightness: 64", device.getReceivedMessagesList().get(2).getMessage());
-        assertEquals("done", device.getReceivedMessagesList().get(3).getMessage());
+        assertEquals("Got lgt on", device.getReceivedMessagesList().get(0).getContent());
+        assertEquals("Lights on", device.getReceivedMessagesList().get(1).getContent());
+        assertEquals("Brightness: 64", device.getReceivedMessagesList().get(2).getContent());
+        assertEquals("done", device.getReceivedMessagesList().get(3).getContent());
     }
 
 }
\ No newline at end of file
diff --git a/src/test/java/Interpreter/InterpreterTest.java b/src/test/java/Interpreter/InterpreterTest.java
index 1bd0ca8..8ef468b 100755
--- a/src/test/java/Interpreter/InterpreterTest.java
+++ b/src/test/java/Interpreter/InterpreterTest.java
@@ -69,7 +69,7 @@ public class InterpreterTest {
 
     @Test
     public void interpretCommandWithOneIntegerParameterTest() throws Throwable {
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
 
         DeviceCommandParam param1 = new DeviceCommandParam("Param1", DeviceCommandParamType.Integer, List.of(), 0, 100, false, "");
         DeviceCommand deviceCommand = new DeviceCommand("Command 1", "Command 1", "CM1", "cm_1", List.of(param1), List.of(), List.of("State1", "State2"), "State3");
@@ -84,7 +84,7 @@ public class InterpreterTest {
 
     @Test
     public void interpretCommandWithOneIntegerParameterAndOneStringParameterTest() throws Throwable {
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
 
         DeviceCommandParam param1 = new DeviceCommandParam("Param1", DeviceCommandParamType.Integer, List.of(), 0, 100, false, "");
         DeviceCommandParam param2 = new DeviceCommandParam("Param2", DeviceCommandParamType.String, List.of("ABC", "XXX"), null, null, false, "");
@@ -100,7 +100,7 @@ public class InterpreterTest {
 
     @Test
     public void interpretCommandWithOneIntegerParameterAndOneStringParameterAndTwoCommandsWithTheSameNameAndNumberOfParametersTest() throws Throwable {
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
 
         DeviceCommandParam param1 = new DeviceCommandParam("Param1", DeviceCommandParamType.Integer, List.of(), 0, 100, false, "");
         DeviceCommandParam param2 = new DeviceCommandParam("Param2", DeviceCommandParamType.String, List.of("ABC", "XXX"), null, null, false, "");
@@ -120,7 +120,7 @@ public class InterpreterTest {
 
     @Test
     public void interpretAMessageContainingCommandWithTheSameNameAndDifferentNumberOfParametersTest() throws Throwable {
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
 
         DeviceCommandParam param1 = new DeviceCommandParam("Param1", DeviceCommandParamType.Integer, List.of(), 0, 100, false, "");
         DeviceCommandParam param2 = new DeviceCommandParam("Param2", DeviceCommandParamType.String, List.of("ABC", "XXX"), null, null, false, "");
@@ -140,7 +140,7 @@ public class InterpreterTest {
 
     @Test
     public void interpretCommandWithEventsTest() throws Throwable {
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
 
         DeviceCommand deviceCommand = new DeviceCommand("Command 1", "Command 1", "CM1", "cm_1", List.of(), List.of("ABC", "XXX", "YYY"), List.of("State1", "State2"), "State3");
         ExternalDevice externalDevice = new ExternalDevice("dev1", null, List.of(), List.of(deviceCommand), "State1");
@@ -154,7 +154,7 @@ public class InterpreterTest {
 
     @Test
     public void interpretCommandForDeviceWithIncorrectInitialStateTest() {
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
 
         DeviceCommandParam param1 = new DeviceCommandParam("Param1", DeviceCommandParamType.Integer, List.of(), 0, 100, false, "");
         DeviceCommand deviceCommand = new DeviceCommand("Command 1", "Command 1", "CM1", "cm_1", List.of(param1), List.of(), List.of("State1", "State2"), "State3");
@@ -171,7 +171,7 @@ public class InterpreterTest {
 
     @Test
     public void interpretCommandWithIncorrectSignatureTest() {
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
 
         DeviceCommandParam param1 = new DeviceCommandParam("Param1", DeviceCommandParamType.Integer, List.of(), 0, 100, false, "");
         DeviceCommand deviceCommand = new DeviceCommand("Command 1", "Command 1", "CM1", "cm_1", List.of(param1), List.of(), List.of("State1", "State2"), "State3");
@@ -188,7 +188,7 @@ public class InterpreterTest {
 
     @Test
     public void interpretCommandWithOptionalParametersTest() throws Throwable {
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
 
         DeviceCommandParam param1 = new DeviceCommandParam("Param1", DeviceCommandParamType.Integer, List.of(), 0, 100, false, "");
         DeviceCommandParam param2 = new DeviceCommandParam("Param2", DeviceCommandParamType.Integer, List.of(), 0, 100, true, "0");
@@ -204,7 +204,7 @@ public class InterpreterTest {
 
     @Test
     public void interpretCommandWithParametersNotFromTheListTest() {
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
 
         List<String> possibleValues = List.of("ABC", "XXX");
         DeviceCommandParam param1 = new DeviceCommandParam("Param1", DeviceCommandParamType.String, possibleValues, 0, 0, false, "");
@@ -222,7 +222,7 @@ public class InterpreterTest {
 
     @Test
     public void interpretCommandHelpTest() {
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
 
         DeviceCommandParam param1 = new DeviceCommandParam("Param1", DeviceCommandParamType.String, List.of("ABC", "XXX"), 0, 0, false, "");
         DeviceCommand deviceCommand = new DeviceCommand("Command 1", "Command 1", "CM1", "cm_1", List.of(param1), List.of(), List.of(), "");
diff --git a/src/test/java/MessageManagementTest.java b/src/test/java/MessageManagementTest.java
index 0385ef5..6a9c1b2 100644
--- a/src/test/java/MessageManagementTest.java
+++ b/src/test/java/MessageManagementTest.java
@@ -13,7 +13,7 @@ public class MessageManagementTest {
         String messageContent = "Message content ABC";
         String userName = "User1";
 
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
         ChatManager chatManager = new ChatManager(userManager);
 
         // When
@@ -29,7 +29,7 @@ public class MessageManagementTest {
 
     @Test
     public void setMessageTypeTest(){
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
         ChatManager chatManager = new ChatManager(userManager);
 
         /* USER MESSAGE */
@@ -88,7 +88,7 @@ public class MessageManagementTest {
     @Test
     public void messageSubscriptionTest(){
         // Given
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
         ChatManager chatManager = new ChatManager(userManager);
         String messageContent = "!system abc";
         String userName = "User1";
@@ -121,7 +121,7 @@ public class MessageManagementTest {
     @Test
     public void messageWithErrorTest(){
         // Given
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
         ChatManager chatManager = new ChatManager(userManager);
         String messageContent = "!system abc";
         String userName = "User1";
diff --git a/src/test/java/UserManagementTest.java b/src/test/java/UserManagementTest.java
index ee93ba9..af8c9f7 100644
--- a/src/test/java/UserManagementTest.java
+++ b/src/test/java/UserManagementTest.java
@@ -11,7 +11,7 @@ public class UserManagementTest {
     @Test
     public void addUserTest() {
         // Given
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
         String userName = "user1";
 
         // When
@@ -26,7 +26,7 @@ public class UserManagementTest {
     @Test
     public void addMessageTest(){
         // Given
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
         ChatManager chatManager = new ChatManager(userManager);
         String messageContent = "Message Content ABC";
         String messageUserName = "User1";
@@ -44,7 +44,7 @@ public class UserManagementTest {
     @Test
     public void addMultipleMessages(){
         // Given
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
         ChatManager chatManager = new ChatManager(userManager);
         String messageContent = "Message Content ABC";
         String messageUserName1 = "User1";
@@ -65,7 +65,7 @@ public class UserManagementTest {
     @Test
     public void changeActiveUserAfterRequest() throws Exception {
         // Given
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
         String newUserName = "User1";
         Message message = new Message(userManager.getUser(newUserName), "!control request 10", new Date());
         message.setType(MessageType.COMMAND);
@@ -82,7 +82,7 @@ public class UserManagementTest {
     @Test
     public void userRequestQueueTest(){
         // Given
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
 
         // When
         userManager.addRequest(userManager.getUser("User1"), 0.1f);
@@ -103,7 +103,7 @@ public class UserManagementTest {
     @Test
     public void annotateCommandMessageTest(){
         // Given
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
         Message requestMessage = new Message(userManager.getUser("User1"), "!control request 5");
         requestMessage.setType(MessageType.COMMAND);
 
@@ -117,7 +117,7 @@ public class UserManagementTest {
     @Test
     public void ignoreAnnotationOfNotCommandMessageTest(){
         // Given
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
         Message requestMessage = new Message(userManager.getUser("User1"), "!control request 5");
         requestMessage.setType(MessageType.MESSAGE);
 
@@ -131,7 +131,7 @@ public class UserManagementTest {
     @Test
     public void requestErrorMessageTest(){
         // Given
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
         ChatManager chatManager = new ChatManager(userManager);
         chatManager.addMessageSubscriber(userManager);
         Message requestMessage = new Message(userManager.getUser("User1"), "!control abc 5");
@@ -146,7 +146,7 @@ public class UserManagementTest {
     @Test
     public void banUserTest(){
         // Given
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
         ChatManager chatManager = new ChatManager(userManager);
         chatManager.addMessageSubscriber(userManager);
         String bannedUsername = "User1";
@@ -167,7 +167,7 @@ public class UserManagementTest {
     @Test
     public void unbanUserTest(){
         // Given
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
         ChatManager chatManager = new ChatManager(userManager);
         chatManager.addMessageSubscriber(userManager);
         String bannedUsername = "User1";
@@ -195,7 +195,7 @@ public class UserManagementTest {
     public void requestControlForAnotherUserTest() throws Exception {
         // Given
         String userAdmin = "UserAdmin";
-        UserManager userManager = new UserManager(List.of(), List.of(userAdmin));
+        UserManager userManager = new UserManager(List.of(userAdmin));
         String requestTarget = "User1";
         Message message = new Message(userManager.getUser(userAdmin), "!control request 10 " + requestTarget);
         message.setType(MessageType.COMMAND);
@@ -212,7 +212,7 @@ public class UserManagementTest {
     public void requestControlForAnotherUserAsNonAdminTest() throws Exception {
         // Given
         String userNonAdmin = "UserX";
-        UserManager userManager = new UserManager(List.of(), List.of());
+        UserManager userManager = new UserManager(List.of());
         String requestTarget = "User1";
         Message message = new Message(userManager.getUser(userNonAdmin), "!control request 10 " + requestTarget);
         message.setType(MessageType.COMMAND);
